#!/bin/sh
#-
# Copyright (c) 2015 HardenedBSD
# Author: Shawn Webb <shawn.webb@hardenedbsd.org>
#
# This work originally sponsored by G2, Inc
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# This script builds the update archive.
#
# Dependencies:
#	1) git
#	2) OpenSSL

debug_print() {
	echo ${1} >&2
}

usage() {
	debug_print "USAGE: ${0} [-e] [-c build.conf]"
	exit 1
}

setup_environment() {
	REPO="git://github.com/HardenedBSD/hardenedBSD.git"
	BRANCH="hardened/current/master"
	PRIVKEY="/usr/share/keys/updater/private/updater.key"
	PUBKEY="/usr/share/keys/updater/certs/updater.crt"
	SIGNBIN="/usr/bin/openssl"
	KERNELS="HARDENEDBSD"
	SRCDIR="/usr/src"
	STAGEDIR="/builds/updater/stage"
	OUTPUTDIR="/builds/updater/output"
	CHROOTDIR="/builds/updater/chroot"
	LOGDIR="/builds/updater/logs"
	FULLCLEAN="yes"
	DEVMODE="" # set to empty instead of "no"
	SRCCONFPATH=""
	DEBUGBUILD=""
	USE_EXISTING=0
}

cleanup_chroot() {
	if [ ! -d ${CHROOTDIR} ]; then
		return 0
	fi

	if mount | grep -q ${CHROOTDIR}/dev; then
		umount ${CHROOTDIR}/dev
	fi

	if [ ! ${FULLCLEAN} = "no" ]; then
		chflags -R noschg ${CHROOTDIR}
		rm -rf ${CHROOTDIR}
	fi
}

setup_directories() {
	if [ ${USE_EXISTING} -eq 0 ]; then
		rm -rf ${STAGEDIR} || true # Don't care if this fails
	fi

	mkdir -p ${STAGEDIR}
	mkdir -p ${OUTPUTDIR}
	mkdir -p ${LOGDIR}

	touch ${STAGEDIR}/lock
}

setup_chroot() {
	if ! mount | grep -q ${CHROOTDIR}/dev; then
		if [ ! -d ${CHROOTDIR}/dev ]; then
			mkdir -p ${CHROOTDIR}/dev
		fi

		mount -t devfs devfs ${CHROOTDIR}/dev
	fi

	cd ${SRCDIR}
	make -s installworld distribution DESTDIR=${CHROOTDIR}
	res=${?}
	if [ ${res} -gt 0 ]; then
		return ${res}
	fi

	mkdir -p ${CHROOTDIR}/usr/obj

	return 0
}

clone_source() {
	if [ ! -d ${CHROOTDIR}/usr/src/.git ]; then
		git clone ${REPO} ${CHROOTDIR}/usr/src
		res=${?}
		if [ ${res} -gt 0 ]; then
			return ${res}
		fi

		cd ${CHROOTDIR}/usr/src
		branch=$(git branch | grep -F "* " | awk '{print $2;}')
		if [ ! "${branch}" = "${BRANCH}" ]; then
			git checkout -b ${BRANCH} origin/${BRANCH}
			res=${?}
			if [ ${res} -gt 0 ]; then
				return ${res}
			fi
		fi
	else
		cd ${CHROOTDIR}/usr/src
		git pull
		res=${?}
		if [ ${res} -gt 0 ]; then
			return ${res}
		fi
	fi

	return 0
}

build_source() {
	debug_print "[*] Building world"
	chroot ${CHROOTDIR} make \
		-C /usr/src \
		-sj$(sysctl -n hw.ncpu) \
		$(echo ${DEVMODE} | sed 's/yes/-DNO_CLEAN/') \
		buildworld

	res=${?}
	if [ ${res} -gt 0 ]; then
		return ${res}
	fi

	for kernel in $(echo ${KERNELS}); do
		debug_print "[*] Building kernel ${kernel}"
		chroot ${CHROOTDIR} make \
			-C /usr/src \
			KERNCONF=${kernel} \
			-sj$(sysctl -n hw.ncpu) \
			$(echo ${DEVMODE} | \
				sed 's/yes/-DNO_KERNELCLEAN/') \
			buildkernel

		res=${?}
		if [ ${res} -gt 0 ]; then
			return ${res}
		fi
	done

	return 0
}

create_src_conf() {
	if [ -z "${SRCCONFPATH}" ]; then
		if [ ! -z "${DEBUGBUILD}" ]; then
			echo "WITHOUT_DEBUG_FILES=1" \
				> ${CHROOTDIR}/etc/src.conf
		fi
	else
		cp ${SRCCONFPATH} ${CHROOTDIR}/etc/src.conf
	fi
}

prep_release() {
	chroot ${CHROOTDIR} make -sC /usr/src/release obj clean
	res=${?}
	if [ ${res} -gt 0 ]; then
		return ${res}
	fi

	return ${res}
}

build_base_archive() {
	debug_print "[*] Making base.txz in /usr/src/release"
	chroot ${CHROOTDIR} make -sC /usr/src/release base.txz
	res=${?}
	if [ ${res} -gt 0 ]; then
		return ${res}
	fi

	mv ${CHROOTDIR}/usr/obj/usr/src/release/base.txz ${STAGEDIR}
	res=${?}
	if [ ${res} -gt 0 ]; then
		return ${res}
	fi
}

build_etcupdate_archive() {
	debug_print "[*] Making etcupdate archive"
	chroot ${CHROOTDIR} etcupdate build \
		-B \
		/tmp/etcupdate.tbz
	res=${?}
	if [ ${res} -gt 0 ]; then
		return ${res}
	fi

	cp ${CHROOTDIR}/tmp/etcupdate.tbz ${STAGEDIR}
	res=${?}
	if [ ${res} -gt 0 ]; then
		return ${res}
	fi

	return 0
}

build_kernel_archives() {
	for kernel in $(echo ${KERNELS}); do
		chroot ${CHROOTDIR} make -sC /usr/src/release \
			kernel.txz KERNCONF=${kernel}
		res=${?}
		if [ ${res} -gt 0 ]; then
			return ${res}
		fi

		mv ${CHROOTDIR}/usr/obj/usr/src/release/kernel.txz \
			${STAGEDIR}/kernel-${kernel}.txz
		res=${?}
		if [ ${res} -gt 0 ]; then
			return ${res}
		fi
	done
}

add_extra_files() {
	cat <<EOF > ${STAGEDIR}/skip.txt
./etc
./root/.profile
./var/empty
EOF

	cp ${CHROOTDIR}/usr/src/UPDATING ${STAGEDIR}/
	cp ${CHROOTDIR}/usr/src/UPDATING-HardenedBSD ${STAGEDIR}/
}

sign_artifacts() {
	if [ -z "${PRIVKEY}" ]; then
		return 0
	else
		if [ ! -f ${PRIVKEY} ]; then
			return 1
		fi
	fi

	for file in $(find ${STAGEDIR} -name \*.txz -o -name \*.tbz); do
		sha512 -q ${file} | ${SIGNBIN} rsautl \
			-sign \
			-inkey ${PRIVKEY} \
			-out ${file}.sig
	done

	sha512 -q ${STAGEDIR}/skip.txt | openssl rsautl \
		-sign \
		-inkey ${PRIVKEY} \
		-out ${STAGEDIR}/skip.txt.sig

	if [ -f ${PUBKEY} ]; then
		cp ${PUBKEY} ${STAGEDIR}/pubkey.pem
	fi
}

git_version() {
	cd ${CHROOTDIR}/usr/src
	git log -n 1 --format=format:%H
}

hbsd_version() {
	grep -F __HardenedBSD_version \
		${CHROOTDIR}/usr/src/sys/sys/pax.h | \
		awk '{print $3;}'
}

full_version() {
	echo "hbsd-v$(hbsd_version)-$(git_version)"
}

build_update_archive() {
	ver=$(full_version)

	cd ${STAGEDIR}
	tar -cf ${OUTPUTDIR}/update-${ver}.tar \
		--exclude ./lock \
		--exclude ./success \
		.

	return ${?}
}

sanity_check() {
	if [ $(id -u) -gt 0 ]; then
		echo "ERROR: ${0} must be run as root." >&2
		exit 1
	fi

	if [ -f ${STAGEDIR}/lock ]; then
		echo "ERROR: ${0} is already running." >&2
		echo "       If you feel this is in error, remove the lockfile at ${STAGEDIR}/lock" >&2
		exit 1
	fi
}

sanity_check_archive() {
	if [ ! -f ${STAGEDIR}/base.txz ]; then
		debug_print "[-] Could not find ${STAGEDIR}/base.txz"
		return 1
	fi

	if [ ! -f ${STAGEDIR}/base.txz.sig ]; then
		debug_print "[-] Could not find ${STAGEDIR}/base.txz.sig"
		return 1
	fi

	for kernel in ${KERNELS}; do
		if [ ! -f ${STAGEDIR}/kernel-${kernel}.txz ]; then
			debug_print "[-] Could not find ${STAGEDIR}/kernel-${kernel}.txz"
			return 1
		fi

		if [ ! -f ${STAGEDIR}/kernel-${kernel}.txz.sig ]; then
			debug_print "[-] Could not find ${STAGEDIR}/kernel-${kernel}.txz.sig"
			return 1
		fi
	done

	if [ ! -f ${STAGEDIR}/etcupdate.tbz ]; then
		debug_print "[-] Could not find ${STAGEDIR}/etcupdate.tbz"
		return 1
	fi

	if [ ! -f ${STAGEDIR}/etcupdate.tbz.sig ]; then
		debug_print "[-] Could not find ${STAGEDIR}/etcupdate.tbz.sig"
		return 1
	fi

	if [ ! -f ${STAGEDIR}/skip.txt ]; then
		debug_print "[-] Could not find ${STAGEDIR}/skip.txt"
		return 1
	fi

	if [ ! -f ${STAGEDIR}/skip.txt.sig ]; then
		debug_print "[-] Could not find ${STAGEDIR}/skip.txt.sig"
		return 1
	fi

	return 0
}

log_build() {
	logfile=$(date '+%F_%T')
	debug_print "Log: ${LOGDIR}/${logfile}.log"
	cat > ${LOGDIR}/${logfile}.log
}

main() {
	set -e
	setup_environment
	sanity_check
	while getopts 'ec:h' opt; do
		case ${opt} in
			c)
				BUILDCONF="${OPTARG}"
				;;
			e)
				USE_EXISTING=1
				;;
			*)
				usage
				;;
		esac
	done

	if [ ! -z "${BUILDCONF}" ]; then
		. ${BUILDCONF}
	fi

	setup_directories || exit 1

	(
		if [ ${USE_EXISTING} -eq 0 ]; then
			cleanup_chroot || exit 1
			setup_chroot || exit 1
			clone_source || exit 1
			create_src_conf || exit 1
			build_source || exit 1

			prep_release || exit 1
			build_base_archive || exit 1
			build_kernel_archives || exit 1
			build_etcupdate_archive || exit 1
			add_extra_files || exit 1
		fi

		sign_artifacts || exit 1
		sanity_check_archive || exit 1
		build_update_archive || exit 1
		touch ${STAGEDIR}/success
		exit 0
	) 2>&1 | log_build

	if [ -f ${STAGEDIR}/success ]; then
		echo "OK $(date '+%s')|$(full_version)"
	else
		echo "FAIL"
	fi

	rm -f ${STAGEDIR}/lock
	rm -f ${STAGEDIR}/success
}

main "${@}"
